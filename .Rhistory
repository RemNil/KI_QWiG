#          `U` = 21, `V` = 22, `W` = 23, `X` = 24, `Y` = 25) %>%
#   mutate(year = as.numeric(format(as.Date(year, origin = "1899-12-30"), "%Y"%>%
#   filter(!is.na(year))
#
# # Step 3: Rename Q:Y to real EMA approval category labels
# # (Replace with actual category names as in your Excel file header row 9)
# colnames(clean_data)[2:10] <- c(
#   "Orphan", "Accelerated", "Exceptional Circumstances", "Conditional Approval",
#   "Biosimilar", "Generic", "Well-established", "Hybrid", "Other"
# )
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- raw_data %>%
pivot_longer(cols = -"Marketing authorisation date", names_to = "EMA approval category", values_to = "value") %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
# clean_data <- raw_data %>%
#   select(year = 32, `Q` = 17, `R` = 18, `S` = 19, `T` = 20,
#          `U` = 21, `V` = 22, `W` = 23, `X` = 24, `Y` = 25) %>%
#   mutate(year = as.numeric(format(as.Date(year, origin = "1899-12-30"), "%Y"%>%
#   filter(!is.na(year))
#
# # Step 3: Rename Q:Y to real EMA approval category labels
# # (Replace with actual category names as in your Excel file header row 9)
# colnames(clean_data)[2:10] <- c(
#   "Orphan", "Accelerated", "Exceptional Circumstances", "Conditional Approval",
#   "Biosimilar", "Generic", "Well-established", "Hybrid", "Other"
# )
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- raw_data %>%
pivot_longer(cols = -"Marketing authorisation date", names_to = "EMA approval category", values_to = "value") %>%
group_by("Marketing authorisation date", `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
clean_data <- raw_data %>%
select(year = 32, `Q` = 17, `R` = 18, `S` = 19, `T` = 20,
`U` = 21, `V` = 22, `W` = 23, `X` = 24, `Y` = 25) %>%
mutate(year = as.numeric(format(as.Date(year, origin = "1899-12-30"), "%Y"%>%
filter(!is.na(year))
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
select(year = 32, `Q` = 17, `R` = 18, `S` = 19, `T` = 20,
`U` = 21, `V` = 22, `W` = 23, `X` = 24, `Y` = 25) %>%
mutate(year = as.numeric(format(as.Date(year, origin = "1899-12-30"), "%Y"%>%
filter(!is.na(year))
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
clean_data <- raw_data %>%
select(year = 32, `Q` = 17, `R` = 18, `S` = 19, `T` = 20,
`U` = 21, `V` = 22, `W` = 23, `X` = 24, `Y` = 25) %>%
mutate(year = as.numeric(format(as.Date(year, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year))
View(clean_data)
clean_data <- raw_data %>%
select("Orphan", "Accelerated", "Exceptional Circumstances", "Conditional Approval",
"Biosimilar", "Generic", "Well-established", "Hybrid", "Other") %>%
mutate(year = as.numeric(format(as.Date(year, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year))
View(clean_data)
View(dat)
View(raw_data)
# Clinical Trial Portfolio Analysis
Ethical justification for the burdens placed on clinical research participants extends well beyond rigorous trial design. Modern scholarship stresses that trials should form part of an aligned **research portfolio**, where each study fills knowledge gaps and builds on prior evidence, contributing to a coherent, cumulative understanding of therapeutic questions. This portfolio approach is central for generating social value and ethically justifying participant burdens, as research efforts that are strategically linked offer a far greater return on participant contribution than isolated studies [@london2019clinical; @kimmelman2017drug; @kimmelman2015structure].
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
select("Marketing authorisation date", "PRIME: priority medicine", "Accelerated assessment", "Additional monitoring", "Advanced therapy", "Biosimilar", "Conditional approval", "Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(year, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year)) %>%
filter(Category!="Human")
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
select("Marketing authorisation date", "PRIME: priority medicine", "Accelerated assessment", "Additional monitoring", "Advanced therapy", "Biosimilar", "Conditional approval", "Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year)) %>%
filter(Category!="Human")
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
select("Marketing authorisation date", "PRIME: priority medicine", "Accelerated assessment", "Additional monitoring", "Advanced therapy", "Biosimilar", "Conditional approval", "Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year)) %>%
filter("Category"!="Human")
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- raw_data %>%
pivot_longer(cols = -year, names_to = "EMA approval category", values_to = "value") %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
filter(Category == "Human") %>%  # move this to the top before select
select("Marketing authorisation date",
"PRIME: priority medicine", "Accelerated assessment",
"Additional monitoring", "Advanced therapy",
"Biosimilar", "Conditional approval",
"Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year))
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- raw_data %>%
pivot_longer(cols = -year, names_to = "EMA approval category", values_to = "value") %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
filter(Category == "Human") %>%  # move this to the top before select
select("Marketing authorisation date",
"PRIME: priority medicine", "Accelerated assessment",
"Additional monitoring", "Advanced therapy",
"Biosimilar", "Conditional approval",
"Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year))
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- clean_data %>%
pivot_longer(
cols = -c(year, `Marketing authorisation date`),
names_to = "EMA approval category",
values_to = "value"
) %>%
mutate(value = as.numeric(tolower(as.character(value)) %in% c("yes", "1", "true"))) %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
# Step 6: Streamgraph visualization
library(streamgraph)
streamgraph(data = dat,
key = "EMA approval category",
value = "n",
date = "year",
top = 20, right = 10, bottom = 30, left = 30,
interactive = TRUE,
order = "inside-out",
interpolate = "cardinal-open") %>%
sg_axis_x(2, "year", "%Y") %>%
sg_fill_brewer("YlOrRd")
dat
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
filter(Category == "Human") %>%  # move this to the top before select
select("Marketing authorisation date",
"PRIME: priority medicine", "Accelerated assessment",
"Additional monitoring", "Advanced therapy",
"Biosimilar", "Conditional approval",
"Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year))
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- clean_data %>%
pivot_longer(
cols = -c(year, `Marketing authorisation date`),
names_to = "EMA approval category",
values_to = "value"
) %>%
mutate(value = as.numeric(tolower(as.character(value)) %in% c("yes", "1", "true"))) %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
# Step 6: Streamgraph visualization
library(streamgraph)
streamgraph(data = dat,
key = `EMA approval category`,
value = "n",
date = "year",
top = 20, right = 10, bottom = 30, left = 30,
interactive = TRUE,
order = "inside-out",
interpolate = "cardinal-open") %>%
sg_axis_x(2, "year", "%Y") %>%
sg_fill_brewer("YlOrRd")
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
filter(Category == "Human") %>%  # move this to the top before select
select("Marketing authorisation date",
"PRIME: priority medicine", "Accelerated assessment",
"Additional monitoring", "Advanced therapy",
"Biosimilar", "Conditional approval",
"Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year))
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- clean_data %>%
pivot_longer(
cols = -c(year, `Marketing authorisation date`),
names_to = "EMA approval category",
values_to = "value"
) %>%
mutate(value = as.numeric(tolower(as.character(value)) %in% c("yes", "1", "true"))) %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
# Step 6: Streamgraph visualization
library(streamgraph)
dat <- dat %>%
rename(
category = `EMA approval category`,
count = n
)
streamgraph(data = dat,
key = "category",
value = "count",
date = "year",
top = 20, right = 10, bottom = 30, left = 30,
interactive = TRUE,
order = "inside-out",
interpolate = "cardinal-open") %>%
sg_axis_x(2, "year", "%Y") %>%
sg_fill_brewer("YlOrRd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
str(dat)
View(clean_data)
clean_data <- raw_data %>%
filter(Category == "Human") %>%  # move this to the top before select
select("Marketing authorisation date",
"PRIME: priority medicine", "Accelerated assessment",
"Additional monitoring", "Advanced therapy",
"Biosimilar", "Conditional approval",
"Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, origin = "1899-12-30"), "%Y"))) %>%
filter(!is.na(year))
View(raw_data)
View(clean_data)
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
filter(Category == "Human") %>%  # move this to the top before select
select("Marketing authorisation date",
"PRIME: priority medicine", "Accelerated assessment",
"Additional monitoring", "Advanced therapy",
"Biosimilar", "Conditional approval",
"Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, origin = "14/02/2025"), "%Y"))) %>%
filter(!is.na(year))
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- clean_data %>%
pivot_longer(
cols = -c(year, `Marketing authorisation date`),
names_to = "EMA approval category",
values_to = "value"
) %>%
mutate(value = as.numeric(tolower(as.character(value)) %in% c("yes", "1", "true"))) %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
# Step 6: Streamgraph visualization
library(streamgraph)
dat <- dat %>%
rename(
category = `EMA approval category`,
count = n
)
streamgraph(data = dat,
key = "category",
value = "count",
date = "year",
top = 20, right = 10, bottom = 30, left = 30,
interactive = TRUE,
order = "inside-out",
interpolate = "cardinal-open") %>%
sg_axis_x(2, "year", "%Y") %>%
sg_fill_brewer("YlOrRd")
View(clean_data)
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
filter(Category == "Human") %>%  # move this to the top before select
select("Marketing authorisation date",
"PRIME: priority medicine", "Accelerated assessment",
"Additional monitoring", "Advanced therapy",
"Biosimilar", "Conditional approval",
"Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, format = "%d/%m/%Y"), "%Y")))  %>%
filter(!is.na(year))
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- clean_data %>%
pivot_longer(
cols = -c(year, `Marketing authorisation date`),
names_to = "EMA approval category",
values_to = "value"
) %>%
mutate(value = as.numeric(tolower(as.character(value)) %in% c("yes", "1", "true"))) %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
# Step 6: Streamgraph visualization
library(streamgraph)
dat <- dat %>%
rename(
category = `EMA approval category`,
count = n
)
streamgraph(data = dat,
key = "category",
value = "count",
date = "year",
top = 20, right = 10, bottom = 30, left = 30,
interactive = TRUE,
order = "inside-out",
interpolate = "cardinal-open") %>%
sg_axis_x(2, "year", "%Y") %>%
sg_fill_brewer("YlOrRd")
View(dat)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(readxl)
library(dplyr)
library(tidyr)
library(caret)
# Step 1: Read Excel skipping the top 8 rows (adjust if needed)
raw_data <- read_excel("medicines_output_medicines_en.xlsx", skip = 8)
# Step 2: Rename AF to 'year' and extract columns Q to Y (i.e., columns 17 to 25)
# Note: Use `names(raw_data)` to check actual column names if unsure
# # Assuming column AF is at position 32
clean_data <- raw_data %>%
filter(Category == "Human") %>%  # move this to the top before select
select("Marketing authorisation date",
"PRIME: priority medicine", "Accelerated assessment",
"Additional monitoring", "Advanced therapy",
"Biosimilar", "Conditional approval",
"Generic or hybrid", "Orphan medicine") %>%
mutate(year = as.numeric(format(as.Date(`Marketing authorisation date`, format = "%d/%m/%Y"), "%Y")))  %>%
filter(!is.na(year))
# Step 4: One-hot encode if not already binary/logical
# If these are already 1/0 or TRUE/FALSE, we can proceed
# If they are character (e.g., "Yes"/"No"), convert to binary
raw_data[2:10] <- lapply(raw_data[2:10], function(x) as.numeric(tolower(x) %in% c("yes", "1", "true")))
# Step 5: Reshape to long format
dat <- clean_data %>%
pivot_longer(
cols = -c(year, `Marketing authorisation date`),
names_to = "EMA approval category",
values_to = "value"
) %>%
mutate(value = as.numeric(tolower(as.character(value)) %in% c("yes", "1", "true"))) %>%
group_by(year, `EMA approval category`) %>%
summarise(n = sum(value, na.rm = TRUE), .groups = "drop")
# Step 6: Streamgraph visualization
library(streamgraph)
dat <- dat %>%
rename(
category = `EMA approval category`,
count = n
)
streamgraph(data = dat,
key = "category",
value = "count",
date = "year",
top = 20, right = 10, bottom = 30, left = 30,
interactive = TRUE,
order = "inside-out",
interpolate = "cardinal-open") %>%
sg_axis_x(2, "year", "%Y") %>%
sg_fill_brewer("Blues")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
View(dat)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook", clean = TRUE)
